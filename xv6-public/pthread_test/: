#include <stdio.h>
#include <pthread.h>
#include <stdatomic.h>
#include <unistd.h>
#include <time.h>
#define NUM_ITERS 1000
#define NUM_THREADS 1000
#define NUM_TESTS 1000
#define ALPHA 0.8

long long shared_resource = 0;
void lock();
void unlock();

volatile atomic_flag lockflag = ATOMIC_FLAG_INIT;
int S = 1;
struct timespec ts;
struct timespec start_t, end_t;

void lock()
{
	while(atomic_flag_test_and_set(&lockflag)) { 
		nanosleep(&ts, NULL);		
		continue;
	}
	clock_gettime(CLOCK_MONOTONIC, &start_t);	
}

void unlock()
{	
	clock_gettime(CLOCK_MONOTONIC, &end_t);
	ts.tv_sec = (end_t.tv_sec - start_t.tv_sec)*ALPHA + ts.tv_sec*(1 - ALPHA);
	ts.tv_nsec = (end_t.tv_nsec - start_t.tv_nsec)*ALPHA + ts.tv_nsec*(1 - ALPHA);

	atomic_flag_clear(&lockflag);
}

void* thread_func(void* arg) {
    int tid = *(int*)arg;
    
    lock();
    
        for(int i = 0; i < NUM_ITERS; i++) shared_resource++;

    unlock();  

    pthread_exit(NULL);
}

long long test() {
    int n = NUM_THREADS;
		shared_resource = 0;
		pthread_t threads[n];
    int tids[n];
    
    for (int i = 0; i < n; i++) {
        tids[i] = i;
        pthread_create(&threads[i], NULL, thread_func, &tids[i]);
    }
    
    for (int i = 0; i < n; i++) {
        pthread_join(threads[i], NULL);
    }

    
    return shared_resource;
}


int main() {
	long long answer = NUM_THREADS * NUM_ITERS;
	int isfail = 0;

	ts.tv_sec = 0;
	ts.tv_nsec = 1000 * NUM_THREADS; 
	
	struct timespec start_time, end_time;
	double elapsed;

	for(int i = 0; i < NUM_TESTS; i++) {
		clock_gettime(CLOCK_MONOTONIC, &start_time);	
	
		long long ret = test();
		clock_gettime(CLOCK_MONOTONIC, &end_time);
		elapsed = (end_time.tv_sec - start_time.tv_sec) + (end_time.tv_nsec - start_time.tv_nsec) / 1e9;
		if(ret != answer){
			printf("[test%d] returned %lld, but expected %lld\n", i+1, ret, answer);
			isfail = 1;
		} else{
			printf("[test%d]: execution time %.6f seconds\n", i+1, elapsed);
		}
	}
	if(!isfail)
		printf("success!!!\n");
	return 0;
}
